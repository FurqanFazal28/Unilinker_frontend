{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Furqan Fazal\\\\Downloads\\\\final update\\\\final update\\\\src\\\\Components\\\\Question.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BASE_URL } from '../api';\nimport useStateContext from '../Hooks/UseStateContext';\nimport { Card, CardContent, CardMedia, CardHeader, List, ListItemButton, Typography, Box, LinearProgress, FormControl, FormGroup, FormControlLabel, Checkbox, Button, TextField, Container } from '@mui/material';\nimport { getFormatedTime } from '../helper';\nimport { useNavigate } from 'react-router';\nimport Grid from '@mui/material/Grid';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n  const [qns, setQns] = useState([]);\n  const [qnIndex, setQnIndex] = useState(0);\n  const [timeTaken, setTimeTaken] = useState(0);\n  const {\n    context,\n    setContext\n  } = useStateContext();\n  const navigate = useNavigate();\n  const [categories, setCategories] = useState([{\n    id: '1',\n    name: 'English',\n    checked: false\n  }, {\n    id: '2',\n    name: 'IQ',\n    checked: false\n  }, {\n    id: '3',\n    name: 'Basic Math',\n    checked: false\n  }, {\n    id: '4',\n    name: 'Advance Math',\n    checked: false\n  }, {\n    id: '5',\n    name: 'Bio',\n    checked: false\n  }, {\n    id: '6',\n    name: 'Chemistry',\n    checked: false\n  }, {\n    id: '7',\n    name: 'Physics',\n    checked: false\n  }]);\n  const [questionCount, setQuestionCount] = useState(5);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  let timer;\n  const startTimer = () => {\n    clearInterval(timer); // Clear any existing timer\n    timer = setInterval(() => {\n      setTimeTaken(prev => prev + 1);\n    }, 1000);\n  };\n  const fetchQuestions = () => {\n    const selectedCategories = categories.filter(cat => cat.checked).map(cat => cat.id);\n    const isAllChecked = categories.some(cat => cat.name === 'All' && cat.checked);\n    if (selectedCategories.length === 0 || isAllChecked) {\n      fetch(`${BASE_URL}/api/Question/GetAll?count=${questionCount}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => {\n        if (data.length !== questionCount) {\n          console.error('The number of questions fetched does not match the expected count');\n        }\n        setQns(data);\n        startTimer();\n      }).catch(error => {\n        console.error('There was a problem with your fetch operation:', error);\n      });\n    } else {\n      const url = `${BASE_URL}/api/Question?CategoryIds=${selectedCategories.join('&CategoryIds=')}&Count=${questionCount}`;\n      fetch(url).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => {\n        if (data.length !== questionCount) {\n          console.error('The number of questions fetched does not match the expected count');\n        }\n        setQns(data);\n        startTimer();\n      }).catch(error => {\n        console.error('There was a problem with your fetch operation:', error);\n      });\n    }\n  };\n  useEffect(() => {\n    if (formSubmitted && categories.length > 0) {\n      fetchQuestions();\n    }\n  }, [formSubmitted, categories]);\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    if (categories && categories.length > 0) {\n      setFormSubmitted(true);\n    } else {\n      console.error('Categories state is undefined or empty.');\n    }\n  };\n  const handleCategoryChange = id => {\n    const updatedCategories = categories.map(cat => cat.id === id ? {\n      ...cat,\n      checked: !cat.checked\n    } : cat);\n    setCategories(updatedCategories);\n  };\n  const handleQuestionCountChange = e => {\n    setQuestionCount(e.target.value);\n  };\n  const updateAnswer = (qnId, optionIdx) => {\n    const temp = [...context.selectedOptions];\n    const index = temp.findIndex(item => item.qnId === qnId);\n    if (index !== -1) {\n      temp[index].selected = optionIdx;\n    } else {\n      temp.push({\n        qnId,\n        selected: optionIdx\n      });\n    }\n\n    // Treat unanswered questions as incorrect when moving to the next question\n    if (qnIndex < questionCount - 1) {\n      var _temp$index;\n      if (((_temp$index = temp[index]) === null || _temp$index === void 0 ? void 0 : _temp$index.selected) === null) {\n        // If the question is unanswered, mark it as incorrect\n        temp[index].selected = -1;\n      }\n      setContext({\n        selectedOptions: [...temp]\n      });\n      setQnIndex(qnIndex + 1);\n    } else {\n      // Add skipped questions to selectedOptions state\n      for (let i = qnIndex + 1; i < questionCount; i++) {\n        temp.push({\n          qnId: qns[i].qnId,\n          selected: -1 // Mark as unanswered\n        });\n      }\n      setContext({\n        selectedOptions: [...temp],\n        timeTaken\n      });\n      navigate(\"/result\");\n    }\n  };\n  const handleBack = () => {\n    if (qnIndex > 0) {\n      setQnIndex(qnIndex - 1);\n    }\n  };\n  useEffect(() => {\n    setQns([]);\n    setQnIndex(0);\n    setFormSubmitted(false);\n    setTimeTaken(0);\n    setContext({\n      participantId: 0,\n      timeTaken: 0,\n      selectedOptions: []\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-main\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        align: \"center\",\n        gutterBottom: true,\n        className: \"page-title\",\n        children: \"Test Preparation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            gutterBottom: true,\n            className: \"question-content\",\n            children: \"Choose any category to prepare for your test.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), !formSubmitted ? /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleFormSubmit,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              sx: {\n                m: 2\n              },\n              className: \"question-list\",\n              children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: categories.every(cat => cat.checked),\n                    onChange: () => {\n                      const allChecked = categories.every(cat => cat.checked);\n                      const updatedCategories = categories.map(cat => ({\n                        ...cat,\n                        checked: !allChecked\n                      }));\n                      setCategories(updatedCategories);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 54\n                  }, this),\n                  label: \"All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 41\n                }, this), categories.map(cat => categories.length > 0 && cat && /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: cat.checked || false,\n                    onChange: () => handleCategoryChange(cat.id),\n                    disabled: categories.every(c => c && c.id !== cat.id && c.checked)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 66\n                  }, this),\n                  label: cat.name\n                }, cat.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-foot\",\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                sx: {\n                  m: 2\n                },\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  type: \"number\",\n                  label: \"Number of Questions\",\n                  value: questionCount,\n                  onChange: handleQuestionCountChange,\n                  inputProps: {\n                    min: 1,\n                    max: 100\n                  },\n                  className: \"questionInput\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                type: \"submit\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this) : null, qns.length !== 0 ? /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              maxWidth: 640,\n              mx: 'auto',\n              mt: 5,\n              '& .MuiCardHeader-action': {\n                m: 0,\n                alignSelf: 'center'\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              title: 'Question ' + (qnIndex + 1) + ' of ' + questionCount,\n              action: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: handleBack,\n                  disabled: qnIndex === 0,\n                  children: \"Back\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: getFormatedTime(timeTaken)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n                variant: \"determinate\",\n                value: (qnIndex + 1) * 100 / questionCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 33\n            }, this), qns[qnIndex].imageName != null ? /*#__PURE__*/_jsxDEV(CardMedia, {\n              component: \"img\",\n              image: BASE_URL + 'Images/' + qns[qnIndex].imageName,\n              sx: {\n                width: 'auto',\n                m: '10px auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 37\n            }, this) : null, /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: qns[qnIndex].qnInWords\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(List, {\n                children: qns[qnIndex].options && qns[qnIndex].options.map((item, idx) => /*#__PURE__*/_jsxDEV(ListItemButton, {\n                  disableRipple: true,\n                  onClick: () => updateAnswer(qns[qnIndex].qnId, idx),\n                  sx: {\n                    backgroundColor: context.selectedOptions.find(option => option.qnId === qns[qnIndex].qnId && option.selected === idx) ? '#3399FF' : 'transparent'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                      children: String.fromCharCode(65 + idx) + \" . \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 257,\n                      columnNumber: 53\n                    }, this), item]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 49\n                  }, this)\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 29\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-image\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/images/png/test-preparation2.webp\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"CWaqvP2Cf91P4e6BVy6jbQbtoKM=\", false, function () {\n  return [useStateContext, useNavigate];\n});\n_c = Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","BASE_URL","useStateContext","Card","CardContent","CardMedia","CardHeader","List","ListItemButton","Typography","Box","LinearProgress","FormControl","FormGroup","FormControlLabel","Checkbox","Button","TextField","Container","getFormatedTime","useNavigate","Grid","jsxDEV","_jsxDEV","Fragment","_Fragment","Quiz","_s","qns","setQns","qnIndex","setQnIndex","timeTaken","setTimeTaken","context","setContext","navigate","categories","setCategories","id","name","checked","questionCount","setQuestionCount","formSubmitted","setFormSubmitted","timer","startTimer","clearInterval","setInterval","prev","fetchQuestions","selectedCategories","filter","cat","map","isAllChecked","some","length","fetch","then","response","ok","Error","json","data","console","error","catch","url","join","handleFormSubmit","e","preventDefault","handleCategoryChange","updatedCategories","handleQuestionCountChange","target","value","updateAnswer","qnId","optionIdx","temp","selectedOptions","index","findIndex","item","selected","push","_temp$index","i","handleBack","participantId","className","children","maxWidth","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","md","onSubmit","sx","m","control","every","onChange","allChecked","label","disabled","c","type","inputProps","min","max","mx","mt","alignSelf","title","action","onClick","imageName","component","image","width","qnInWords","options","idx","disableRipple","backgroundColor","find","option","String","fromCharCode","src","_c","$RefreshReg$"],"sources":["C:/Users/Furqan Fazal/Downloads/final update/final update/src/Components/Question.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BASE_URL } from '../api';\r\nimport useStateContext from '../Hooks/UseStateContext';\r\nimport { Card, CardContent, CardMedia, CardHeader, List, ListItemButton, Typography, Box, LinearProgress, FormControl, FormGroup, FormControlLabel, Checkbox, Button, TextField, Container } from '@mui/material';\r\nimport { getFormatedTime } from '../helper';\r\nimport { useNavigate } from 'react-router';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nexport default function Quiz() {\r\n    const [qns, setQns] = useState([]);\r\n    const [qnIndex, setQnIndex] = useState(0);\r\n    const [timeTaken, setTimeTaken] = useState(0);\r\n    const { context, setContext } = useStateContext();\r\n    const navigate = useNavigate();\r\n    const [categories, setCategories] = useState([\r\n        { id: '1', name: 'English', checked: false },\r\n        { id: '2', name: 'IQ', checked: false },\r\n        { id: '3', name: 'Basic Math', checked: false },\r\n        { id: '4', name: 'Advance Math', checked: false },\r\n        { id: '5', name: 'Bio', checked: false },\r\n        { id: '6', name: 'Chemistry', checked: false },\r\n        { id: '7', name: 'Physics', checked: false },\r\n    ]);\r\n    const [questionCount, setQuestionCount] = useState(5);\r\n    const [formSubmitted, setFormSubmitted] = useState(false);\r\n\r\n    let timer;\r\n\r\n    const startTimer = () => {\r\n        clearInterval(timer); // Clear any existing timer\r\n        timer = setInterval(() => {\r\n            setTimeTaken(prev => prev + 1);\r\n        }, 1000);\r\n    };\r\n\r\n    const fetchQuestions = () => {\r\n        const selectedCategories = categories.filter(cat => cat.checked).map(cat => cat.id);\r\n        const isAllChecked = categories.some(cat => cat.name === 'All' && cat.checked);\r\n\r\n        if (selectedCategories.length === 0 || isAllChecked) {\r\n            fetch(`${BASE_URL}/api/Question/GetAll?count=${questionCount}`)\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Network response was not ok');\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    if (data.length !== questionCount) {\r\n                        console.error('The number of questions fetched does not match the expected count');\r\n                    }\r\n                    setQns(data);\r\n                    startTimer();\r\n                })\r\n                .catch(error => {\r\n                    console.error('There was a problem with your fetch operation:', error);\r\n                });\r\n        } else {\r\n            const url = `${BASE_URL}/api/Question?CategoryIds=${selectedCategories.join('&CategoryIds=')}&Count=${questionCount}`;\r\n            fetch(url)\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Network response was not ok');\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    if (data.length !== questionCount) {\r\n                        console.error('The number of questions fetched does not match the expected count');\r\n                    }\r\n                    setQns(data);\r\n                    startTimer();\r\n                })\r\n                .catch(error => {\r\n                    console.error('There was a problem with your fetch operation:', error);\r\n                });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (formSubmitted && categories.length > 0) {\r\n            fetchQuestions();\r\n        }\r\n    }, [formSubmitted, categories]);\r\n\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (categories && categories.length > 0) {\r\n            setFormSubmitted(true);\r\n        } else {\r\n            console.error('Categories state is undefined or empty.');\r\n        }\r\n    };\r\n\r\n    const handleCategoryChange = (id) => {\r\n        const updatedCategories = categories.map(cat =>\r\n            cat.id === id ? { ...cat, checked: !cat.checked } : cat\r\n        );\r\n        setCategories(updatedCategories);\r\n    };\r\n\r\n    const handleQuestionCountChange = (e) => {\r\n        setQuestionCount(e.target.value);\r\n    };\r\n\r\n    const updateAnswer = (qnId, optionIdx) => {\r\n        const temp = [...context.selectedOptions];\r\n        const index = temp.findIndex(item => item.qnId === qnId);\r\n        if (index !== -1) {\r\n            temp[index].selected = optionIdx;\r\n        } else {\r\n            temp.push({\r\n                qnId,\r\n                selected: optionIdx\r\n            });\r\n        }\r\n    \r\n        // Treat unanswered questions as incorrect when moving to the next question\r\n        if (qnIndex < questionCount - 1) {\r\n            if (temp[index]?.selected === null) {\r\n                // If the question is unanswered, mark it as incorrect\r\n                temp[index].selected = -1;\r\n            }\r\n            setContext({ selectedOptions: [...temp] });\r\n            setQnIndex(qnIndex + 1);\r\n        } else {\r\n            // Add skipped questions to selectedOptions state\r\n            for (let i = qnIndex + 1; i < questionCount; i++) {\r\n                temp.push({\r\n                    qnId: qns[i].qnId,\r\n                    selected: -1 // Mark as unanswered\r\n                });\r\n            }\r\n            setContext({ selectedOptions: [...temp], timeTaken });\r\n            navigate(\"/result\");\r\n        }\r\n    };\r\n    \r\n    const handleBack = () => {\r\n        if (qnIndex > 0) {\r\n            setQnIndex(qnIndex - 1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setQns([]);\r\n        setQnIndex(0);\r\n        setFormSubmitted(false);\r\n        setTimeTaken(0);\r\n        setContext({\r\n            participantId: 0,\r\n            timeTaken: 0,\r\n            selectedOptions: []\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className='question-main'> \r\n            <Container maxWidth=\"lg\">\r\n                <Typography variant=\"h3\" align=\"center\" gutterBottom className='page-title'>\r\n                    Test Preparation\r\n                </Typography>\r\n                <Grid container spacing={4}>\r\n                    <Grid item md={6}>\r\n                        <Typography variant=\"body1\" gutterBottom className='question-content'>\r\n                            Choose any category to prepare for your test.\r\n                        </Typography>\r\n                        {!formSubmitted ? (\r\n                            <form onSubmit={handleFormSubmit}>\r\n                                <FormControl sx={{ m: 2 }} className='question-list'>\r\n                                    <FormGroup>\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox\r\n                                                checked={categories.every(cat => cat.checked)}\r\n                                                onChange={() => {\r\n                                                    const allChecked = categories.every(cat => cat.checked);\r\n                                                    const updatedCategories = categories.map(cat => ({ ...cat, checked: !allChecked }));\r\n                                                    setCategories(updatedCategories);\r\n                                                }}\r\n                                            />}\r\n                                            label=\"All\"\r\n                                        />\r\n                                        {categories.map(cat => (\r\n                                            categories.length > 0 && (\r\n                                                cat && (\r\n                                                    <FormControlLabel\r\n                                                        key={cat.id}\r\n                                                        control={<Checkbox\r\n                                                            checked={cat.checked || false}\r\n                                                            onChange={() => handleCategoryChange(cat.id)}\r\n                                                            disabled={categories.every(c => c && c.id !== cat.id && c.checked)}\r\n                                                        />}\r\n                                                        label={cat.name}\r\n                                                    />\r\n                                                )\r\n                                            )\r\n                                        ))}\r\n                                    </FormGroup>\r\n                                </FormControl>\r\n\r\n                                <div className='question-foot'>\r\n                                    <FormControl sx={{ m: 2 }}>\r\n                                        <TextField\r\n                                            type=\"number\"\r\n                                            label=\"Number of Questions\"\r\n                                            value={questionCount}\r\n                                            onChange={handleQuestionCountChange}\r\n                                            inputProps={{ min: 1, max: 100 }}\r\n                                            className='questionInput'\r\n                                        />\r\n                                    </FormControl>\r\n                                    <Button variant=\"contained\" type=\"submit\">Submit</Button>\r\n                                </div>\r\n                            </form>\r\n                        ) : null}\r\n                        {qns.length !== 0 ? (\r\n                            <Card\r\n                                sx={{\r\n                                    maxWidth: 640, mx: 'auto', mt: 5,\r\n                                    '& .MuiCardHeader-action': { m: 0, alignSelf: 'center' }\r\n                                }}\r\n                            >\r\n                                <CardHeader\r\n                                    title={'Question ' + (qnIndex + 1) + ' of ' + questionCount}\r\n                                    action={\r\n                                        <>\r\n                                            <Button variant=\"contained\" onClick={handleBack} disabled={qnIndex === 0}>Back</Button>\r\n                                            <Typography>{getFormatedTime(timeTaken)}</Typography>\r\n                                        </>\r\n                                    }\r\n                                />\r\n                                <Box>\r\n                                    <LinearProgress variant=\"determinate\" value={(qnIndex + 1) * 100 / questionCount} />\r\n                                </Box>\r\n                                {qns[qnIndex].imageName != null ? (\r\n                                    <CardMedia\r\n                                        component=\"img\"\r\n                                        image={BASE_URL + 'Images/' + qns[qnIndex].imageName}\r\n                                        sx={{ width: 'auto', m: '10px auto' }}\r\n                                    />\r\n                                ) : null}\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\">\r\n                                        {qns[qnIndex].qnInWords}\r\n                                    </Typography>\r\n                                    <List>\r\n                                        {qns[qnIndex].options && qns[qnIndex].options.map((item, idx) => (\r\n                                            <ListItemButton\r\n                                                key={idx}\r\n                                                disableRipple\r\n                                                onClick={() => updateAnswer(qns[qnIndex].qnId, idx)}\r\n                                                sx={{\r\n                                                    backgroundColor: context.selectedOptions.find(option => option.qnId === qns[qnIndex].qnId && option.selected === idx) ? '#3399FF' : 'transparent'\r\n                                                }}\r\n                                            >\r\n                                                <div>\r\n                                                    <b>{String.fromCharCode(65 + idx) + \" . \"}</b>{item}\r\n                                                </div>\r\n                                            </ListItemButton>\r\n                                        ))}\r\n                                    </List>\r\n                                </CardContent>\r\n                            </Card>\r\n                        ) : null}\r\n                    </Grid >\r\n                    <Grid item md={6}>\r\n                        <div className='question-image'>\r\n                            <img src='/images/png/test-preparation2.webp' />\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}